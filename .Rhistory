runApp()
runApp()
runApp()
runApp()
#### Shiny application goes here :)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(dplyr)
library(RODBC)
library(RODBCext)
library(DT)
# library(leaflet)
source("functions.R")
source("database_functions.R")
ui <- dashboardPage(
dashboardHeader(
title = "FIFA World Cup Russia 2018"
),
### sidebar:----
dashboardSidebar(
sidebarMenu(
menuItem(
tabName = "welcome",
text = "Welcome to Russia 2018"
),
menuItem(
tabName = "historicResults",
text = "Results"
),
menuItem(
tabName = "standings",
text = "Standings"
),
# menuItem(
#
#   text = "My account",
#
#   tabName = "account"),
menuItem(
tabName = "bet",
text = "Go bet!"
)
)
),
### body:----
dashboardBody(
useShinyjs(),
tags$link(
rel = "stylesheet", href = "style/style.css"
),
tags$link(rel="stylesheet",
href="https://use.fontawesome.com/releases/v5.0.13/css/all.css",
integrity="sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp",
crossorigin="anonymous"),
tabItems(
tabItem(
tabName = "welcome",
tags$div(
id = "russia2018-img-container"
),
tags$section(
class = "center narrow",
id = "welcome-text",
h2(HTML("Welcome to the<br><strong>FIFA World Cup<br>Russia 2018</strong><br>betting application!")),
p("We're glad that You've joined us!")
)
),
tabItem(
tabName = "bet",
uiOutput(
"bet-dynamic-ui"
)
),
tabItem(
tabName = "standings",
renderStandings()
),
tabItem(
tabName = "historicResults",
renderResults()
)
)
)
)
runApp()
!is.na(res_admin$role)
runApp()
runApp()
View(output)
View(output)
runApp()
library(shiny)
renderMyUI <- function(){
tags$div(
actionLink(
inputId = "lnk-otw-cos",
label = "Kliknij",
class = "my-class-dupa"
),
uiOutput(outputId = "mySubUI")
)
}
ui <- fluidPage(
tags$head(
tags$style(
".my-class-dupa {color: red; background: lime; border: 1px solid blue;}"
)
),
uiOutput(outputId = "myUI"),
actionButton(
inputId = "btnRender",
label = "Rysuj"
),
actionButton(
inputId = "dwld",
"Download"
),
sliderInput(
inputId = "sld",
label = "Slider 1",
value = 10,
min = 0,
max = 20
),
tags$div(
class = "my-class-dupa",
"Lorem ipsum dolor sit amet...",
tableOutput("tbl")
),
dataTableOutput('myDT')
)
server <- function(input, output, session) {
proxy <- dataTableProxy('myDT')
observeEvent(input[['btnRender']],{
output$myUI <- renderUI({
renderMyUI()
})
})
observeEvent(input[['lnk-otw-cos']], {
showNotification("Klik!")
})
myfile <- eventReactive(input$dwld, {
browser()
print(input$sld)
f <- read.csv2("C:/Users/jakub.malecki/Downloads/CustomInputs.txt")
f
})
output$tbl <- renderTable({
myfile()
})
output$myDT <- renderDataTable({
data.frame(
speed = numeric(),
dist = numeric()
)
})
observe({
proxy %>% replaceData(data = cars[1:input$sld,])
})
observeEvent(input$`lnk-otw-cos`, {
output$mySubUI <- renderUI({
tags$p("Thi is a sub UI, rendered dynamically.")
})
})
}
shinyApp(ui, server)
library(shiny)
renderMyUI <- function(){
tags$div(
actionLink(
inputId = "lnk-otw-cos",
label = "Kliknij",
class = "my-class-dupa"
),
uiOutput(outputId = "mySubUI")
)
}
ui <- fluidPage(
tags$head(
tags$style(
".my-class-dupa {color: red; background: lime; border: 1px solid blue;}"
)
),
uiOutput(outputId = "myUI"),
actionButton(
inputId = "btnRender",
label = "Rysuj"
),
actionButton(
inputId = "dwld",
"Download"
),
sliderInput(
inputId = "sld",
label = "Slider 1",
value = 10,
min = 0,
max = 20
),
tags$div(
class = "my-class-dupa",
"Lorem ipsum dolor sit amet...",
tableOutput("tbl")
),
dataTableOutput('myDT')
)
server <- function(input, output, session) {
proxy <- dataTableProxy('myDT')
observeEvent(input[['btnRender']],{
output$myUI <- renderUI({
renderMyUI()
})
})
observeEvent(input[['lnk-otw-cos']], {
showNotification("Klik!")
output$mySubUI <- renderUI({
tags$p("Thi is a sub UI, rendered dynamically.")
})
})
myfile <- eventReactive(input$dwld, {
browser()
print(input$sld)
f <- read.csv2("C:/Users/jakub.malecki/Downloads/CustomInputs.txt")
f
})
output$tbl <- renderTable({
myfile()
})
output$myDT <- renderDataTable({
data.frame(
speed = numeric(),
dist = numeric()
)
})
observe({
proxy %>% replaceData(data = cars[1:input$sld,])
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
queryDB(
cnx,
"select role from users where login = ?",
params = list(user$login)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(res)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cnx <- db_connect('test', 'test123')
runApp()
runApp()
runApp()
runApp()
cnx
user
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rhandsontable)
as.character(Sys.time())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
df <- hot_to_r(input$tblEnterResults)
hot_to_r(input$tblEnterResults) %>%
filter(!is.na(team1_regular), !is.na(team2_regular)) %>%
select(match_id, team1_regular, team2_regular, winner_after_penalties)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
odbcCloseAll()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('~/_tmp_Hannoversche')
#### Packages ####
library(shiny)
install.packages("shiny")
install.packages("shinydashboard")
install.packages("shinyjs")
install.packages("shinyWidgets")
install.packages("tidyverse")
#### Packages ####
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyWidgets)
library(readxl)
library(DT)
install.packages("DT")
library(DT)
library(rhandsontable)
install.packages("rhandsontable")
install.packages("plotly")
runApp('~/_tmp_Hannoversche')
library(scales)
library(ggplot2)
library(data.table)
library(readr)
library(dplyr)
library(magrittr)
library(hashids)
install.packages("hashids")
library(hashids)
library(bindr)
library(sos)
install.packages("sos")
library(sos)
library(RcppRoll)
install.packages("RcppRoll")
library(RcppRoll)
library(tidyr)
library(DT)
library(gdata)
install.packages("gdata")
library(zoo)
install.packages("zoo")
library(zoo)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(glmnet)
install.packages("glmnet")
library(rhandsontable)
library(plotly)
library(lubridate)
library(prophet)
install.packages("prophet")
runApp('~/_tmp_Hannoversche')
install.packages("reshape")
runApp('~/_tmp_Hannoversche')
source('~/_Repos/___PRIV/Russia2018/database_functions.R', echo=TRUE)
getDF <- function(table.name){
sql <- paste("select * from", table.name)
queryDB(
cnx,
sql
)
}
getDF <- function(cnx = cnx, table.name){
sql <- paste("select * from", table.name)
queryDB(
cnx,
sql
)
}
getDF <- function(cnx = cnx, table.name){
sql <- paste("select * from", table.name)
r <- queryDB(
cnx,
sql
)
odbcClose(cnx)
r
}
getDF(table.name = "Bets")
library(RODBC)
cnx <- try(
RODBC::odbcDriverConnect(
connection = "Driver={SQL Server};
Server=DB3;
Database=Russia2018;
Port=1433;
Uid=Russia2018;
Pwd=ek70G1xI9SSSgvZFJ4hG;
"
)
)
getDF <- function(cnx = cnx, table.name){
sql <- paste("select * from", table.name)
r <- queryDB(
cnx,
sql
)
odbcClose(cnx)
r
}
getDF(table.name = "Bets")
odbcCloseAll()
library(RODBCext)
cnx <- try(
RODBC::odbcDriverConnect(
connection = "Driver={SQL Server};
Server=DB3;
Database=Russia2018;
Port=1433;
Uid=Russia2018;
Pwd=ek70G1xI9SSSgvZFJ4hG;
"
)
)
getDF <- function(cnx = cnx, table.name){
sql <- paste("select * from", table.name)
r <- queryDB(
cnx,
sql
)
odbcClose(cnx)
r
}
getDF(table.name = "Bets")
odbcCloseAll()
odbcCloseAll()
odbcCloseAll()
getDF <- function(cnx = cnx, table.name){
sql <- paste("select * from", table.name)
r <- queryDB(
cnx,
sql
)
# odbcClose(cnx)
r
}
getDF(table.name = "Bets")
odbcCloseAll()
source('~/_Repos/___PRIV/Russia2018/database_functions.R', echo=TRUE)
library(RODBC)
library(RODBCext)
cnx <- try(
RODBC::odbcDriverConnect(
connection = "Driver={SQL Server};
Server=DB3;
Database=Russia2018;
Port=1433;
Uid=Russia2018;
Pwd=ek70G1xI9SSSgvZFJ4hG;
"
)
)
getDF <- function(cnx = cnx, table.name){
sql <- paste("select * from", table.name)
r <- queryDB(
cnx,
sql
)
# odbcClose(cnx)
r
}
getDF(table.name = "Bets")
